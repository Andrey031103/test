import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
API_TOKEN = '7687285080:AAGp8QTRUwET-YFzTJFnRuLOvuxH9ylyjSI'
EXCHANGE_API_URL = 'https://v6.exchangerate-api.com/v6/5a6daa99153defa15bf6502a/latest/USD'
CRYPTO_API_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple&vs_currencies=usd'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_FOR_CURRENCY = 1

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
history = []

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency')],
        [InlineKeyboardButton("üí∞ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data='crypto')],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data='history')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='search')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def get_currency_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(EXCHANGE_API_URL)
        data = response.json()
        
        if data['result'] == 'success':
            rates = data['conversion_rates']
            message = (
                "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ USD:\n"
                f"üá™üá∫ EUR: {rates['EUR']:.2f}\n"
                f"üá∑üá∫ RUB: {rates['RUB']:.2f}\n"
                f"üá¨üáß GBP: {rates['GBP']:.2f}\n"
                f"üáØüáµ JPY: {rates['JPY']:.2f}\n"
                f"üá®üá≥ CNY: {rates['CNY']:.2f}"
            )
            history.append("–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
    except Exception as e:
        logging.error(f"Currency error: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"

    query = update.callback_query
    await query.edit_message_text(message, reply_markup=get_back_keyboard())


async def get_crypto_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(CRYPTO_API_URL)
        data = response.json()
        
        message = "üìà –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n"
        for crypto in ['bitcoin', 'ethereum', 'ripple']:
            price = data[crypto]['usd']
            message += f"‚Ä¢ {crypto.capitalize()}: ${price:.2f}\n"
            history.append(f"–ó–∞–ø—Ä–æ—Å {crypto}")
    except Exception as e:
        logging.error(f"Crypto error: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

    query = update.callback_query
    await query.edit_message_text(message.strip(), reply_markup=get_back_keyboard())


async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not history:
        await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞", reply_markup=get_back_keyboard())
        return

    last_requests = history[-10:]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
    message = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n" + "\n".join(
        f"{i+1}. {req}" for i, req in enumerate(last_requests)
    )
    await query.edit_message_text(message, reply_markup=get_back_keyboard())


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –í –ø–æ–∏—Å–∫–µ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å: BTC, ETH, EUR, RUB –∏ –¥—Ä.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    query = update.callback_query
    await query.edit_message_text(help_text, reply_markup=get_back_keyboard())

async def search_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR, RUB) –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: bitcoin):",
        reply_markup=get_back_keyboard()
    )
    return WAITING_FOR_CURRENCY  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler

async def handle_currency_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.upper()
    response_message = ""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_response = requests.get(CRYPTO_API_URL)
        crypto_data = crypto_response.json()
        
        if user_input.lower() in crypto_data:
            rate = crypto_data[user_input.lower()]['usd']
            response_message = f"üè¶ {user_input}: ${rate:.2f}"
            history.append(f"–ü–æ–∏—Å–∫: {user_input} - ${rate:.2f}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—ã
            currency_response = requests.get(EXCHANGE_API_URL)
            currency_data = currency_response.json()
            
            if currency_data['result'] == 'success':
                rate = currency_data['conversion_rates'].get(user_input)
                if rate:
                    response_message = f"üíµ {user_input}: {rate:.2f} USD"
                    history.append(f"–ü–æ–∏—Å–∫: {user_input} - {rate:.2f} USD")
                else:
                    response_message = "üö´ –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        response_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"

    await update.message.reply_text(response_message, reply_markup=get_back_keyboard())
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

def get_back_keyboard():
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    return InlineKeyboardMarkup(keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'currency':
        await get_currency_rates(update, context)
    elif query.data == 'crypto':
        await get_crypto_rates(update, context)
    elif query.data == 'history':
        await show_history(update, context)
    elif query.data == 'help':
        await cmd_help(update, context)
    elif query.data == 'search':
        await search_currency(update, context)
    elif query.data == 'back':
        await return_to_main_menu(query)

async def return_to_main_menu(query):
    keyboard = [
        [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency')],
        [InlineKeyboardButton("üí∞ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data='crypto')],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data='history')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='search')]
    ]
    await query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    application = ApplicationBuilder().token(API_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(search_currency, pattern='^search$')],
        states={
            WAITING_FOR_CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_currency_search)]
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == '__main__':
    main()